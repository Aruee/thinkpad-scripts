#!/bin/bash
# Copyright © 2012-2014 Martin Ueding <dev@martin-ueding.de>
# Copyright © 2013 Jim Turner <jturner314@gmail.com>
# Licensed under The GNU Public License Version 2 (or later)

set -e

TEXTDOMAIN=thinkpad-scripts
lock=/tmp/thinkpad-dock.lock

mylogger() {
    echo "$@"
    logger -t thinkpad-dock -i -- "$@"
}

remove-lock() {
    mylogger "Removing lock …"
    rm -f "$lock"
}

exit-hook() {
    remove-lock
    kdialog-exit
}
trap exit-hook EXIT

mylogger $"Script starting up (args: $@) …"

for import in external.sh kdialog.sh
do
    for dir in lib /usr/share/thinkpad-scripts
    do
        importfile="$dir/$import"
        if [[ -f "$importfile" ]]
        then
            . "$importfile"
        fi
    done
done

mylogger $"Running as user $USER."
mylogger $"\$HOME is set to ${HOME-}."
mylogger $"\$HOME is now set to ${HOME=/home/$USER}."

if [[ -f "$lock" ]]
then
    mylogger $"Exiting, because there is more than one running."
    stat "$lock"
    exit 0
else
    mylogger $"No other running instances found."
    touch "$lock"
fi

###############################################################################
#                                   options                                   #
###############################################################################

mylogger $"Setting variables."

# Whether to disable the wifi when going onto the docking station.
disable_wifi=true

# The name of the internal display.
internal="LVDS1"

# Whether to unmute when going onto the docking station. Usually, the speakers
# are muted in the field, but at home you want to have sound.
unmute=true

# The settings for the loudness on the dock and off the dock.
dock_loudness="100%"
undock_loudness="50%"

# Whether to change the brightness of the internal display when docking.
set_brightness=true

# The value to set the brightness to. Needs to be given as a percentage.
brightness="60%"

relative_position="right-of"

# Now import the configuration file if there is one. That will replace any
# options set above.
configfile="$HOME/.config/thinkpad-scripts/dock.sh"

predock_hook="$HOME/.config/thinkpad-scripts/hooks/predock"
postdock_hook="$HOME/.config/thinkpad-scripts/hooks/postdock"

mylogger $"Sourcing config file."

if [[ -f "$configfile" ]]
then
    source "$configfile"
fi

case "$relative_position" in
    right)
        relative_position=right-of
        ;;
    left)
        relative_position=left-of
        ;;
esac

mylogger $"\$kdialog is set to ${kdialog}."

kdialog-init $"thinkpad-dock" 11

# Determine the action.
mylogger $"Determining action: ${1:-auto}"
kdialog-update $"Determining action"
mylogger $"Updated kdialog box"
case "${1:-auto}" in
    on)
        mylogger $"Docking, since user said so."
        setto=on
        ;;
    off)
        mylogger $"Un-docking, since user said so."
        setto=off
        ;;
    auto)
        # Sleep since the docking needs some time to change. This is just a
        # HACK against a race condition, but it should work.
        sleep 1

        # Check the kernel whether the ThinkPad is on the docking station.
        if grep -q 1 /sys/devices/platform/dock.*/docked
        then
            mylogger $"Docking, found a dock that is docked."
            setto=on
        else
            mylogger $"Un-docking, since no dock is connected."
            setto=off
        fi
esac

# Write the determined action into the system log.
mylogger "Now changing to $setto with ${1:-auto} mode."
kdialog-update $"Writing to syslog"

kdialog-update $"Executing pre-hooks"
if [[ -f "$predock_hook" ]]
then
    "$predock_hook" "$setto"
fi

# Dynamically find the external display by searching for connected displays
# that are not the internal ones. If there is no external display connected,
# that will result in an empty variable.
mylogger $"Find external display"
kdialog-update $"Find external display"
find-external
mylogger $"External display ${external:-not} found."

case "$setto" in
    on)
        (
        # Enable audio and set it to full volume.
        if [[ "$unmute" = "true" ]] && type pactl &> /dev/null
        then
            pactl set-sink-volume 0 "$dock_loudness"
            pactl set-sink-mute 0 0
        fi
        kdialog-update $"Enabled audio"
        ) &

        (
        # Set the brightness to a given percentage. My external display
        # obviously has the same brightness all the time, so the internal
        # should have a fixed one as well.
        if [[ "$set_brightness" = "true" ]] && type xbacklight &> /dev/null
        then
            xbacklight -set "$brightness"
        else
            mylogger $"WARNING: No xbacklight found."
        fi
        kdialog-update $"Set brightness"

        # Set the displays to the right setting.
        xrandr --output "$internal" --auto
        xrandr --output "$external" --auto "--${relative_position}" \
            "$internal" --primary
        kdialog-update $"Set external monitor"
        ) &

        (
        # Disable the wireless connection, if the user specified the option,
        # the ``nmcli`` tool is available and the computer is actually
        # connected to the ethernet.
        if [[ "$disable_wifi" = "true" ]] && type nmcli &> /dev/null && grep -q 1 /sys/class/net/e*/carrier
        then
            # FIXME This does not work if invoked via the ``su -c '…' user``
            # command from thinkpad-dock-hook.
            nmcli nm wifi off
        else
            mylogger $"WARNING: No nmcli found."
        fi
        kdialog-update $"Turn wireless off"


        # Reboot the wired connection since that sometimes go bad.
        if type nmcli &> /dev/null && nmcli con | grep DHCP &> /dev/null
        then
            nmcli con down id DHCP
            nmcli con up id DHCP
        fi
        kdialog-update $"Restart LAN connection"
        ) &

        ;;
    off)
        (
        # Disable the external display and make the internal the primary again.
        xrandr --output "$internal" --auto --primary

        if [[ -n "${external:-}" ]]
        then
            xrandr --output "$external" --off
        fi
        kdialog-update $"Make the internal display the primary"
        ) &

        (
        # Set the loudness a little lower so that they do not sound screaming.
        if [[ "$unmute" = "true" ]] && type pactl &> /dev/null
        then
            pactl set-sink-volume 0 "$undock_loudness"
        else
            mylogger $"WARNING: No pactl found."
        fi
        kdialog-update $"Reduce volume"
        ) &

        (
        # Enable the wireless connection.
        if [[ "$disable_wifi" = "true" ]] && type nmcli &> /dev/null
        then
            nmcli nm wifi on
        else
            mylogger $"WARNING: No nmcli found."
        fi
        kdialog-update $"Enable wireless connection"
        ) &

        ;;
esac

###############################################################################
#                                Wacom devices                                #
###############################################################################

(
# Set the Wacom devices to the internal display. If this is not done, they are
# stretched out over both displays which makes no sense.
xsetwacom list devices | grep 'Wacom ISD' | sed 's/id: .*//' | while read device
do
    xsetwacom set "$device" MapToOutput "$internal"
done
kdialog-update $"Map Wacom devices"
) &

wait

kdialog-update $"Executing post-hooks"
if [[ -f "$postdock_hook" ]]
then
    "$postdock_hook" "$setto"
fi

kdialog-update $"Writing to syslog"
mylogger "Script finishing …"
