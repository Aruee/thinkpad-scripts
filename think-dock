#!/bin/bash
# Copyright © 2012 Martin Ueding <dev@martin-ueding.de>

# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.

# You should have received a copy of the GNU General Public License along with
# this program. If not, see http://www.gnu.org/licenses/.

set -e
set -u

###############################################################################
#                                   options                                   #
###############################################################################

# Whether to disable the wifi when going onto the docking station.
disable_wifi=true

# The name of the internal display.
internal="LVDS1"

# Whether to unmute when going onto the docking station. Usually, the speakers
# are muted in the field, but at home you want to have sound.
unmute=true

# The settings for the loudness on the dock and off the dock.
dock_loudness="100%"
undock_loudness="50%"

###############################################################################
#                            find external screen                             #
###############################################################################

# Dynamically find the external display by searching for connected displays
# that are not the internal one. If there is no external display connected,
# this will fail and cause the whole script to fail.
external=$(xrandr | grep -Eo '(\S+) connected' | grep -Eo '^(\S+)' | grep -v "$internal")

echo "External display $external found."

if [[ -z "${1:-}" ]]
then
	echo "usage: think-dock on|off"
	echo "See “man think-dock” for more details."
	exit 2
fi

case "$1" in
	on)
		# Set the screens to the right setting.
		xrandr --output "$internal" --auto
		xrandr --output "$external" --auto --right-of "$internal" --primary

		# Enable audio and set it to full volume.
		if [[ "$unmute" = "true" ]] && type pactl > /dev/null 2>&1
		then
			pactl set-sink-volume 0 "$dock_loudness"
			pactl set-sink-mute 0 0
		fi

		if [[ "$disable_wifi" = "true" ]] && type nmcli > /dev/null 2>&1
		then
			nmcli nm wifi off
		fi
		;;
	off)
		# Disable the external screen and make the internal the primary again.
		xrandr --output "$internal" --auto --primary
		xrandr --output "$external" --off

		if [[ "$unmute" = "true" ]] && type pactl > /dev/null 2>&1
		then
			pactl set-sink-volume 0 "$undock_loudness"
		fi

		if [[ "$disable_wifi" = "true" ]] && type nmcli > /dev/null 2>&1
		then
			nmcli nm wifi on
		fi
		;;
esac

###############################################################################
#                                Wacom devices                                #
###############################################################################

# Set the Wacom devices to the internal screen. If this is not done, they are
# streched out over both screens which makes no sense.
xsetwacom list devices | sed 's/id: .*//' | while read device
do
	xsetwacom set "$device" MapToOutput "$internal"
done
